1.NullPointerException
每一次上线的时候，先灰度一台机器，可以看一下日志，搜索一下NullPointerException，是否是自己造成的。（徐坚）
写任何代码的时候，注意判空！且不要因为之前写错了就慌，在这样的情况下难免会考虑不全面
注意自己写的代码尽量不要影响其他逻辑。
注意代码细节，并增加报警设置，上线的时候，灰度一台机器要自测，看下日志。（吴骏宇）
-----------------------------------------------------------------------------
2.管理路线
如果要走管理路线，那就在搞好技术的同时，盯着管理这条线去走。管理路线不需要扎的深，
但是基础要扎实，同时好奇心要强，要广博。在早期工作时，就不要做完了自己的就觉得万事大吉，
要去关心其他的模块，其他小组，其他部门，整体的生产流程，项目管理，产品设计，销售，都是在干什么。他们有哪些做的好的，哪些做得不好的，如果是你你会怎么做，多推演，多总结。
但前提是技术一定要搞好，基础一定要扎实，因为这是日后防止被下属欺骗和遇到问题时快速决断的重要因素。
但，最关键的是，不要沉溺于技术。在技术管理中，最常见的问题就是大领导沉溺技术。
中层管理以上的岗位（不直接管理基层的岗位）开始，最重要的工作就转化成了培养人才，笼络人才，
团队建设，决策，上下级压力传导，绩效规则制定与考评等等的团队事务上。
如非必要，千万千万千万不要参与具体的事项工作和业务细则中去。因为这时候你做得事情不管对错，
下属往往不敢说出来。而由于精力有不可能面面俱到。这就会造成，该做的事没做好，不该做的事搅黄了。
一定要记住，团队的价值才是管理者的核心价值。
-----------------------------------------------------------------------------
3.写代码心得
心不能急，一步一步来
1.逻辑想清楚了再写。
2.记得一些关键部分，关键参数打印日志。
3.不要慌，不要急，心态平和。
-----------------------------------------------------------------------------
4.怎么排查问题？（宁哥）
根据经验来看，就是在一些关键点去加上监控，就比如二分查找这类的，就能更快的找到问题所在。
上线，还是要密切注意的，一定要根据流程走，否则带来的就不是用户体验问题了，可能就是整个系统不能用了。（宁哥）
-----------------------------------------------------------------------------
5.做定时任务处理和定时处理优化中的感悟+总结

7月份做了选品一体化中的定时任务处理模块。具体工作是在某一个特定的时间去执行任务。担心定时任务随着时间的增长会越来越多，一开始是使用生产-消费者模式（发mq）去并行处理任务。但是组长说串行就够了（担心ck扛不住）。
于是改成串行模式。

Situation:
定时任务做的是这样的功能。1.扫描一张定时任务的表（其中有组id，执行时间，状态等），拿出此时需要执行的任务（当前时间>执行时间）。2.执行定时任务。
在定时任务中，要做如下任务：1.根据组id去ES中查询规则。2.调用rpc接口，根据规则拿到大概10w的sku数据（去click house中查询）。3.拿着sku进行复杂排序，包括自定义指标排序、打散、优选GMV等，把数据放到内存中。
4.将排完序的sku数据进行组装落组，创建分期，并放入组装后的sku。

Task:
每个小时的03分，会进行一次扫描。在一开始任务较少，能够在1个小时完成所有定时任务。但是随着双11的到来，在预售场即将上线的前几天（业务创建了很多预售的商品组），查看定时任务执行时间可能要4个小时。也就是说，某个时间的整点
开始做定时任务，但是此时前一个小时的定时任务还没有完成。从而重复执行，并且执行错误（创建相同时间的分期）。  当天晚上20：00预收场上线，必须再20：00前能够把任务正常执行完成。

Action:
开始优化，耗时一天半。第一天主要在优化复杂计算，以及减少定时任务方面。
第二天看效果并不理想，看每一个定时任务的执行时间，看那些规则执行得慢。 此时优化1： 一开始扫描一张定时任务的表，并串行处理。当时做的分页，每次取100个。然而1小时根本执行
不完成，很多阻塞着，此时第二次扫描来了，再去执行，会重复执行，创建相同时间的分期，从而错误浪费资源。    改成不分页，每次取1个。 
但是效果也不理想，任务还是在1小时完不成。  此时优化2：在一方面在删除测试和产品的定时任务组，另一方面想办法减少耗时，在2、3处都加上了监控，并打出日志，看是哪个流程中耗时。发现是落组这块，由于是无限商品组，要落到es中，耗时。
看监控，整体的tp99和落组的tp99基本是同一趋势。是落组最为耗时。于是开始优化落组。决定落组部分异步，开启一个线程池，考虑es的写入效率，线程开了20个，将落组部分异步进行。

Result:
基本解决问题，预售会场正常上线。

以上总结：这个场景首先特别常见。在短时间内执行大数量级的任务，其中涉及调用rpc接口，查各种数据库（性能瓶颈还是在数据库操作上？）。得到的总结和4一样，要多加上监控，看看哪一方面是主要影响因素。找到了主要影响因素就能针对该
点进行优化，可以并行、异步处理。但是也造成了一个问题，现在已经看不到全部任务的执行时间了。

Star 法则 ： Situation情境，在什么背景下;Task任务，面临什么挑战/目标; Action行动，采取了什么样的举措;Result结果，取得了什么样的成绩
-----------------------------------------------------------------------------
6.JVM调优总结
2021/11/5日，21点左右，ump一直在内存占用率过高报警。
dump一台机器下来，jmap然后去查看，发现其中C占用最高，搞到7个G,一共15.9个G。
可以使用eclipse的memory analy 去查看，但是没看到数据。
猜测可能是本地缓存引起，用的是谷歌的guawacache，设置的是20000个key。

2022/1/25
jVM案例分析1
Situation:
现象：突然收到CPU使用率过高报警，CPU持续占用85%以上
检查结果：1.服务调用率较低
2.通过ump查看对应机器的GC统计，GC频率正常
3.初步结论，CPU使用率过高不是业务过载引起的，可能是程序中有BUG

Task:
解决这个问题或者BUG

Action:
1.找到目标机器，通过jdos上堡垒机登录，在命令行中输入jps命令，找到java进程id为506506
2.执行top -H -p 506506,找到占用cpu最高的线程id为30936
3.通过jdos jstack生成thread dump文件
4.将30936转化成16进制的线程id 0x78D8，在thread dump中找到对应的线程调用栈
5.线程状态为RUNNABLE,说明一直在执行。入口是AbstractMutiworkerIOReactor$Worker.run, 怀疑该处代码有问题
6.决定先定位业务代码在什么场景下使用了该代码
7.通过jdos jmap-dump生成heap dump文件
8.下载后，导入本地visualvm中进行分析
9.找到GC Root是对应线程的AbstractMutiworkerIOReactor$Worker对象
10.展开反向引用，找到创建相关线程的业务代码，从而确定是因为业务代码中用到了apache httpsayncclient
11.通过google，发现对应版本jdk的socket实现在某些场景下会有异常行为，从而会导致一些网络库产生死循环（烧cpu）

Result:
将http链接库换位okhttp（基于Kotlin实现），从而绕开jdk问题，解决问题。
-----------------------------------------------------------------------------
7.2021/11/26 年终谈话
1.要突出自己的优点和亮点 不然别人也记不住你的日常点点滴滴  一般也就一两件事，要让别人记住你 （适应的蛮好，长远的计划，良好的文档输出能力？）
2.保持好的工作状态和作风
-----------------------------------------------------------------------------
8.2021\11\29 写代码设计的时候 写的更通用一些
-----------------------------------------------------------------------------
9.怎么识别自己的技能？
1.专业知识能力 2.自我管理能力 3.可迁移能力
如果当前方法有效，那么继续去做；如果当前方法无效，那么就换一种方法去做。
-----------------------------------------------------------------------------
2021/12/17
10.求三级部门的时候，发现有些时候会出现空指针
经过测试，凡是对集合list，set，map，数组等进行循环一定要进行判断是否为空，增强代码的健壮性
-----------------------------------------------------------------------------
2022/2/22
11.慢sql

（1）update delivery_activity_sort4 set operator = ?, modified = sysdate() , `activity_url`=null ,`category_info`=null ,
`brand_info`=? ,`start_time`=? ,`end_time`=? ,`status`=? ,`ext`=? 
where status!=? and `delivery_id`=? and `activity_id`=?;

<update id="update" parameterClass="ActivitySortInfo">
        update $tableName$ set operator = #operator#, modified = sysdate()
        <dynamic prepend=",">
    		<isNotEmpty prepend="," property="activityUrl">`activity_url`=#activityUrl#</isNotEmpty>
    		<isEmpty prepend="," property="activityUrl">`activity_url`=null</isEmpty>
    		<isNotEmpty prepend="," property="categoryInfo">`category_info`=#categoryInfo#</isNotEmpty>
    		<isEmpty prepend="," property="categoryInfo">`category_info`=null</isEmpty>
    		<isNotEmpty prepend="," property="brandInfo">`brand_info`=#brandInfo#</isNotEmpty>
    		<isEmpty prepend="," property="brandInfo">`brand_info`=null</isEmpty>
    		<isNotNull prepend="," property="startTime">`start_time`=#startTime#</isNotNull>
    		<isNull prepend="," property="startTime">`start_time`=null</isNull>
    		<isNotNull prepend="," property="endTime">`end_time`=#endTime#</isNotNull>
    		<isNull prepend="," property="endTime">`end_time`=null</isNull>
    		<isNotNull prepend="," property="status">`status`=#status#</isNotNull>
            <isNotNull prepend="," property="ext">`ext`=#ext#</isNotNull>
    	</dynamic>
    	where status!=-1 
        <dynamic prepend="and">
			<isNotEmpty prepend="and" property="deliveryId">
				`delivery_id`=#deliveryId#
			</isNotEmpty>
			<isNotEmpty prepend="and" property="activityId">
				`activity_id`=#activityId#
			</isNotEmpty>
		</dynamic>
</update>

最高耗时是96s

可以看到 判断条件为status!=-1，我们这认为status==-1的时候，是删除状态；而秒杀那边 0状态代表关闭bi和活动下线状态
要扫全表，且秒杀那边因为bug会调用接口一直换品？
从而线程池打满，资源释放不了，主表写入全都拒绝连接。从表查询数据没有问题，不然线上接口全挂了。
解决策略：下线秒杀调用的接口，等他们bug改完再上线；添加索引
结果：数据库连接中午12点恢复

（2）
s:
查询分期的接口，一直打不开页面，显示后端异常

t:
查询分期的接口，因为分期数量太大了，从而索引会走begin_time
 <select id="queryProductStageListPageByParams" parameterClass="java.util.HashMap" resultMap="ProductStageInfoMap">
        SELECT
        stage_id, stage_name, stage_type, product_group_id, begin_time, use_bi, use_delivery, direct_delivery_id, pool_id, sort_delivery_id, is_report, source, tbi,
        active_flag, last_update_time, last_update_erpno, create_time, createby_erpno, back_up1, back_up2, back_up3, ext, delivery_id,status,
        delivery_type, blacklist, top_list, did_active_flag, add_num,material_type,stage_type2
        FROM
        babel_activity_product_stage_info
        WHERE
        product_group_id = #productGroupId#
        AND
        active_flag = 'Y'
        <dynamic prepend="AND">
            <isNotNull prepend="AND" property="status">
                status = #status#
            </isNotNull>
        </dynamic>
        ORDER BY
        begin_time ASC
        LIMIT
        #beginNum#, #pageSize#
    </select>

explain之后，发现命中的索引是begin_time_index，而命中babel_activity_product_stage_info_01会更块一些
可以使用强制索引FORCE INDEX、USE INDEX或者IGNORE INDEX。

A：
解决方案：要么使用强制索引FORCE INDEX，要么可以简历联合索引
R:
从30s到30毫秒
----------------------------------------------------------------------------------------------------------------------------------------------------------
2022年618总结
今年618大促分为5个阶段，第一阶段为预售期，从5月23日晚上8点开始；
第二阶段为开门红，从5月31日晚上8点开始至6月3日；
第三阶段的场景期，6月4日开始至6月15日；
第四阶段为高潮期，6月15日晚上8点开始至6月18日；
五阶段为返场期，从6月19日开始。
在本次大促中我们团队体现的一些现象值得复盘一下，首先在开门空包括数次军演压测中，压的量比历年的大促都高，
最高峰值在5月13日凌晨，素材中心qps在44.55w，soa qps在134.7w。展示出来的问题（除却上游问题），集中在素材中心机器CPU打满，GC频繁，调用量太高导致线程池打满，JIMDB热key上。
在618实战中最高峰值在6月17日20:00，素材中心qps上升到121.5w，soa qps在100w。通过扩容、关闭Pfinder等一些策略在617晚20点抗住了百万qps。
所以扩容横向拓展从机器的CPU使用率、性能来看，是有显著提升的，也证明了我们系统的可伸缩性较强，Scale Out效果明显。
从排查问题中看此次大促，有以下几点：
1.（日志层面）（1）查询问题的时候，一些无用日志打的有些多，影响查看需要排查的问题的效率。可以把无需排查问题的冗余日志剔除，亦或加写日志开关，有需打开。
（2）有些异常可以catch的时候更细粒度一些，主要体现在一些老的代码，这块可以看着优化一下。
2.（代码层面）（1）作为入职的新人来看，素材中心代码新老代码交替（lowcode、老的），学习成本较高，排查问题在业务没有描述清楚问题时，也不知道去哪查，导致新人查问题特别耗时（2）我们配置端的上游接口和实时接口的上游接口，其实很多时候需要的内容是一致的，但是我们接入的话需要接两次，开发、学习成本都较高，或许可以考虑把这些上游接口方法的出入参package部分封装起来共用 （3）感觉查一些算法did问题的时候，去平台查同步的did，不太好找，平台做的也很难用，可以考虑写一个查询的参考文档
----------------------------------------------------------------------------------------------------------------------------------------------------------